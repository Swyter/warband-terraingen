#include "Perlin.h"
#include "Utils.h"
#include <cmath>

unsigned char g_perlinPermutationTable[256] =
{
	198, 12, 146, 95, 44, 18, 240, 28, 151, 32, 45, 20, 30, 23, 141, 248,
	168, 254, 178, 85, 92, 216, 236, 175, 47, 88, 67, 136, 234, 1, 72, 106,
	79, 220, 24, 171, 26, 224, 128, 137, 223, 16, 105, 195, 231, 183, 29, 132,
	241, 122, 252, 135, 5, 181, 130, 213, 49, 204, 70, 176, 144, 35, 64, 104,
	19, 39, 46, 13, 246, 233, 9, 177, 31, 61, 154, 117, 129, 75, 139, 118,
	68, 42, 207, 86, 112, 27, 158, 8, 247, 250, 109, 163, 242, 52, 160, 164,
	43, 83, 62, 190, 57, 155, 169, 98, 6, 51, 38, 150, 80, 84, 114, 14,
	253, 194, 4, 138, 101, 25, 60, 97, 167, 188, 148, 209, 77, 192, 131, 227,
	36, 191, 237, 76, 214, 17, 251, 81, 71, 123, 119, 232, 0, 244, 87, 53,
	66, 126, 187, 110, 107, 2, 212, 93, 74, 211, 249, 63, 102, 113, 255, 11,
	173, 197, 166, 157, 226, 124, 90, 199, 59, 10, 100, 140, 89, 208, 221, 37,
	33, 230, 121, 174, 189, 165, 149, 34, 179, 15, 108, 40, 55, 91, 7, 200,
	147, 120, 134, 56, 184, 133, 115, 202, 245, 94, 82, 152, 116, 143, 210, 206,
	145, 203, 193, 127, 180, 125, 22, 159, 142, 156, 219, 111, 99, 217, 96, 41,
	162, 228, 3, 161, 58, 229, 153, 235, 215, 54, 205, 50, 218, 103, 69, 21,
	48, 186, 170, 73, 65, 222, 238, 225, 78, 172, 185, 196, 182, 239, 201, 243,
};

float g_perlinGradientTable[256 * 3] =
{
	-0.382332f, 0.045987f, 0.412422f, 0.322819f, -0.523555f, 0.155692f, -0.599637f, 0.610314f, 0.204491f, -0.326772f, 0.183249f, 0.170122f, 0.137437f, 0.159912f, 0.346638f, 0.012269f,
	-0.149943f, -0.247321f, 0.421695f, -0.031413f, 0.22226f, 0.269062f, 0.312575f, -0.166291f, -0.74937f, -0.184944f, 0.331976f, 0.029522f, 0.484716f, 0.374884f, 0.651325f, 0.0f,
	0.325664f, 0.237639f, -0.077213f, 0.0f, -0.599967f, -0.599965f, 0.0f, -0.106802f, 0.12898f, 0.262476f, 0.539146f, -0.54082f, -0.294115f, -0.40226f, -0.235177f, 0.513393f,
	-0.047496f, -0.238059f, -0.11023f, -0.04151f, 0.047293f, 0.08302f, 0.031514f, -0.065262f, -0.051344f, 0.036846f, 0.514855f, -0.309666f, 0.312743f, -0.15927f, -0.225656f, 0.473331f,
	-0.343894f, 0.361597f, -0.352909f, 0.079702f, -0.477326f, -0.180476f, 0.212372f, 0.185283f, -0.080332f, 0.006545f, 0.049649f, -0.337633f, 0.364485f, -0.607989f, -0.179383f, 0.380025f,
	-0.126611f, 0.229949f, -0.167068f, 0.789544f, -0.879327f, 0.0f, -0.104328f, 0.061701f, 0.558347f, 0.643778f, -0.016567f, -0.00871f, -0.026806f, 0.036742f, -0.082902f, -0.210578f,
	-0.686211f, 0.498557f, 0.205545f, 0.05053f, -0.184377f, -0.10106f, -0.396777f, 0.114284f, 0.142954f, -0.39971f, -0.370211f, 0.799427f, 0.010625f, -0.360047f, -0.285405f, -0.57573f,
	0.45687f, 0.222734f, 0.564252f, 0.774509f, -0.124628f, -0.175417f, -0.05755f, 0.049107f, 0.126588f, 0.389595f, -0.119535f, -0.006558f, -0.190696f, 0.038741f, 0.090039f, -0.048335f,
	-0.180079f, -0.043774f, 0.029059f, -0.011331f, 0.073884f, -0.145004f, 0.0f, -0.488167f, -0.489682f, 0.266305f, -0.048211f, -0.254391f, -0.078009f, 0.301849f, 0.074496f, -0.133721f,
	-0.378882f, 0.449358f, -0.252802f, -0.026044f, 0.080153f, 0.069205f, -0.05561f, -0.107745f, 0.073953f, 0.022285f, 0.0f, 0.321538f, -0.000819f, 0.286642f, -0.076246f, 0.042583f,
	0.058611f, 0.0f, -0.454821f, 0.260599f, 0.665373f, 0.08596f, -0.01242f, -0.292721f, -0.08383f, -0.35935f, 0.107285f, -0.163418f, 0.11873f, -0.878918f, -0.215777f, -0.389136f,
	-0.211051f, -0.307529f, 0.0f, -0.322809f, -0.623562f, 0.172665f, -0.57749f, -0.424905f, 0.082658f, -0.205316f, 0.083868f, 0.258113f, -0.753892f, -0.319969f, 0.0f, -0.725878f,
	-0.006615f, 0.004806f, -0.072567f, 0.464495f, -0.077344f, 0.35127f, -0.016793f, -0.093071f, -0.166656f, 0.060751f, 0.840006f, -0.362233f, -0.198387f, 0.225023f, 0.936188f, -0.444758f,
	-0.11514f, -0.354659f, 0.014497f, -0.029373f, -0.046912f, 0.526206f, -0.445624f, -0.362435f, -0.231729f, -0.289542f, 0.182363f, 0.12552f, -0.057606f, -0.044101f, 0.055588f, -0.049504f,
	-0.082013f, -0.845759f, -0.470834f, -0.068169f, 0.082669f, 0.041471f, 0.013118f, 0.259258f, 0.157987f, 0.511734f, 0.276396f, -0.134263f, -0.265539f, 0.500715f, 0.231015f, 0.445317f,
	-0.311734f, 0.103178f, 0.137202f, 0.011978f, -0.152683f, -0.413649f, -0.013775f, 0.217392f, -0.341425f, 0.287605f, -0.131299f, 0.022249f, -0.023086f, 0.0f, -0.081268f, 0.059899f,
	0.004714f, 0.0f, -0.284805f, -0.603364f, -0.20102f, 0.140391f, 0.316763f, -0.804606f, 0.426147f, -0.103548f, 0.111007f, -0.276499f, -0.264919f, -0.271293f, 0.821277f, 0.124308f,
	0.4558f, -0.632242f, -0.694367f, 0.167233f, 0.013052f, 0.025603f, 0.018478f, 0.070566f, -0.104252f, -0.063714f, 0.028317f, 0.023133f, 0.034385f, 0.501435f, -0.430703f, -0.475005f,
	-0.17456f, -0.766047f, 0.349119f, -0.164142f, 0.056665f, -0.38817f, -0.763245f, 0.388889f, 0.0f, 0.444891f, -0.079174f, 0.390493f, 0.15998f, -0.057249f, 0.13463f, 0.163417f,
	-0.229607f, -0.192898f, 0.288537f, -0.390402f, -0.284583f, -0.075388f, -0.805658f, 0.565244f, -0.193679f, -0.078991f, 0.024717f, -0.045931f, 0.111235f, -0.074319f, -0.665672f, -0.344944f,
	0.411413f, -0.096546f, -0.583653f, -0.324629f, 0.40793f, 0.10454f, 0.660048f, -0.820568f, 0.267792f, 0.112261f, 0.66301f, -0.575374f, -0.320677f, -0.573242f, 0.416483f, -0.437923f,
	0.029031f, 0.562818f, -0.514251f, -0.688641f, 0.3112f, 0.134575f, -0.113951f, -0.185842f, 0.588785f, 0.07939f, -0.03214f, 0.023769f, 0.221999f, -0.259927f, 0.0f, 0.816506f,
	0.454549f, 0.065812f, 0.003058f, 0.003097f, 0.000617f, 0.149211f, 0.008463f, -0.140542f, 0.353697f, -0.301407f, -0.286977f, -0.444848f, 0.388932f, -0.262564f, 0.10957f, -0.237067f,
	0.383215f, -0.843997f, -0.164186f, -0.407824f, 0.748646f, -0.176676f, 0.310143f, 0.017268f, 0.448852f, 0.085881f, 0.001312f, 0.013876f, 0.043496f, -0.031838f, -0.277795f, 0.019677f,
	0.037472f, -0.974004f, 0.186361f, -0.596817f, 0.433611f, -0.329135f, -0.1038f, 0.016461f, -0.067573f, 0.602512f, 0.60251f, 0.0f, 0.055517f, 0.517075f, -0.111035f, -0.193866f,
	0.04815f, 0.028228f, -0.073225f, -0.07015f, 0.178692f, 0.231196f, -0.405436f, 0.534878f, -0.008113f, -0.024969f, -0.092419f, -0.51487f, -0.415516f, -0.472159f, 0.483225f, 0.254046f,
	0.781881f, -0.016453f, 0.123169f, -0.312721f, -0.182725f, -0.214054f, -0.760135f, 0.574751f, -0.381369f, -0.209033f, -0.370622f, 0.39484f, 0.54037f, -0.221661f, -0.523415f, -0.207639f,
	0.165177f, -0.508353f, -0.330354f, 0.292668f, 0.900738f, 0.0f, 0.093909f, 0.023324f, -0.013674f, -0.413931f, -0.048747f, -0.189258f, -0.045809f, -0.386021f, 0.313923f, 0.457278f,
	0.591863f, 0.592619f, -0.361923f, 0.08765f, 0.390406f, 0.09321f, 0.250343f, -0.057607f, 0.256967f, 0.037128f, -0.875059f, -0.258041f, 0.382945f, 0.640064f, 0.004503f, -0.005276f,
	0.018734f, -0.124908f, -0.20383f, 0.0f, -0.165268f, 0.240234f, -0.299769f, 0.72198f, 0.396683f, 0.17599f, 0.528949f, -0.214708f, 0.342476f, 0.47955f, -0.122894f, 0.775932f,
	-0.030996f, 0.0f, 0.134868f, -0.014594f, 0.044915f, -0.017316f, 0.58016f, -0.498274f, 0.471095f, 0.160296f, 0.142754f, -0.236497f, 0.074791f, -0.142261f, -0.046224f, 0.412773f,
	-0.479527f, -0.25511f, -0.228631f, 0.399995f, 0.164699f, 0.299747f, -0.53561f, -0.495665f, -0.039875f, -0.02897f, 0.05948f, -0.259657f, 0.18865f, 0.336903f, -0.13525f, -0.416248f,
	0.472116f, -0.127893f, 0.074129f, -0.343279f, -0.005685f, 0.009164f, -0.001274f, -0.691049f, -0.350751f, 0.298473f, -0.031537f, 0.217033f, 0.063074f, -0.186958f, 0.404504f, -0.653873f,
	0.041271f, -0.576689f, -0.346857f, -0.132702f, -0.041688f, 0.095206f, 0.249581f, 0.181331f, 0.332778f, 0.046968f, -0.034124f, 0.515215f, -0.576599f, -0.07244f, 0.304896f, -0.494652f,
	-0.673044f, 0.349003f, 0.763427f, 0.277402f, 0.164917f, -0.131499f, 0.064191f, -0.288233f, 0.34798f, 0.096356f, 0.32227f, -0.131006f, 0.137525f, 0.477995f, 0.194294f, 0.112615f,
	0.521505f, 0.173785f, 0.070542f, 0.11252f, 0.143387f, 0.129961f, -0.245641f, 0.545331f, -0.273569f, 0.086535f, -0.067099f, 0.04875f, -0.120032f, 0.309317f, 0.224729f, -0.532433f,
	0.217197f, 0.157801f, -0.609051f, 0.032277f, -0.002693f, -0.004582f, 0.016443f, -0.005291f, 0.004595f, 0.06551f, -0.534217f, 0.255287f, 0.385232f, -0.61746f, -0.201973f, 0.049956f,
	0.036295f, -0.217366f, -0.071771f, -0.155923f, -0.077943f, 0.396951f, -0.05768f, -0.574478f, -0.188498f, 0.053955f, 0.27177f, 0.49011f, 0.581275f, 0.327016f, -0.002596f, -0.003844f,
	0.000942f, -0.276486f, 0.352783f, 0.026408f, -0.067877f, 0.614233f, -0.708215f, -0.014551f, -0.095078f, 0.058666f, -0.552212f, 0.696821f, 0.296471f, 0.029568f, -0.091002f, 0.265439f,
	0.740368f, -0.154013f, -0.270329f, -0.115748f, 0.135523f, 0.0f, 0.423776f, 0.370509f, 0.250127f, -0.248043f, -0.484951f, -0.209789f, -0.000314f, -0.05746f, -0.024009f, 0.273355f,
	-0.259453f, 0.137294f, -0.037477f, -0.115346f, -0.575826f, 0.274724f, 0.142359f, -0.169791f, 0.037665f, -0.027365f, -0.031991f, -0.35933f, 0.636097f, 0.051412f, 0.101262f, 0.209703f,
	-0.164983f, -0.200361f, -0.278973f, -0.143513f, -0.133635f, 0.166975f, 0.105166f, -0.272142f, -0.19772f, 0.353101f, 0.520612f, 0.708366f, -0.367319f, 0.273803f, -0.126571f, 0.369126f,
	-0.034668f, -0.165782f, -0.214985f, 0.167786f, -0.905754f, -0.335573f, 0.741254f, 0.239782f, 0.101324f, 0.673682f, 0.276876f, -0.184366f, -0.079911f, 0.058058f, 0.468966f, -0.09032f,
	-0.10712f, -0.060264f, -0.476929f, -0.48766f, -0.632836f, 0.020207f, 0.574117f, -0.040414f, -0.503039f, 0.365478f, -0.510581f, 0.115311f, 0.130793f, -0.544152f, 0.056282f, 0.794572f,
	-0.112563f, 0.488661f, 0.497362f, -0.166646f, -0.215566f, 0.385861f, 0.540876f, 0.795336f, -0.403683f, -0.343516f, -0.234981f, 0.723209f, -0.380219f, -0.045123f, 0.306946f, 0.287834f,
	0.031085f, 0.083707f, -0.00629f, 0.311298f, -0.22617f, 0.171675f, -0.137457f, 0.224179f, 0.710243f, -0.279656f, 0.499711f, 0.462443f, 0.831447f, 0.131686f, 0.0f, -0.309519f,
	-0.109618f, 0.619045f, 0.159594f, 0.046698f, -0.131755f, -0.17193f, 0.147663f, -0.139609f, -0.261018f, -0.127415f, -0.572127f, -0.181165f, -0.557579f, -0.707514f, -0.709104f, 0.170238f,
	0.0f, 0.01268f, 0.039026f, 0.077985f, -0.316095f, -0.03802f, 0.340972f, 0.167454f, 0.51538f, 0.495246f, 0.126888f, 0.136979f, 0.228492f, 0.214834f, 0.456259f, -0.107739f, 
};

Vector4 PerlinOctave(float frequency, float gain, int numOctaves, const Vector4 &in)
{
	Vector4 noiseSum = 0.0f;
	float amplitude = 1.0f;
	float norm = 0.0f;

	for (int i = 0; i <= numOctaves; ++i)
	{
		noiseSum += Perlin(amplitude * frequency, in) * amplitude;
		norm += amplitude;
		amplitude *= gain;
		gain = 0.61f; // ???
	}

	return noiseSum / norm;
}

Vector4 Perlin(float factor, const Vector4 &in)
{
	Vector4 out = 0.0f;

	if (factor == 0.0f)
		return out;

	float xd = (in.x + 1.0f) / factor;
	float yd = (in.y + 1.0f) / factor;
	float zd = (in.z + 1.0f) / factor;
	int xdi = (int)floor(xd);
	int ydi = (int)floor(yd);
	int zdi = (int)floor(zd);
	float xm = xd - xdi;
	float ym = yd - ydi;
	float zm = zd - zdi;
	float xm1 = xm - 1.0f;
	float ym1 = ym - 1.0f;
	float zm1 = zm - 1.0f;
	float xmm = xm * xm;
	float ymm = ym * ym;
	float zmm = zm * zm;
	float xm1m = xm1 * xm1;
	float ym1m = ym1 * ym1;
	float zm1m = zm1 * zm1;
	unsigned char xp = PERLIN_PERMUTATION(xdi);
	unsigned char xp1 = PERLIN_PERMUTATION(xdi + 1);
	unsigned char xpy = PERLIN_PERMUTATION(xp + ydi);
	unsigned char xpy1 = PERLIN_PERMUTATION(xp + ydi + 1);
	unsigned char xp1y = PERLIN_PERMUTATION(xp1 + ydi);
	unsigned char xp1y1 = PERLIN_PERMUTATION(xp1 + ydi + 1);
	unsigned char zp = PERLIN_CLAMP(zdi);
	unsigned char zp1 = PERLIN_CLAMP(zdi + 1);
	float xmm3m = 1.0f - 3.0f * xmm + (xmm * 2) * xm;
	float ymm3m = 1.0f - 3.0f * ymm + (ymm * 2) * ym;
	float zmm3m = 1.0f - 3.0f * zmm + (zmm * 2) * zm;
	float xm1m3m = 1.0f - 3.0f * xm1m - (xm1m * 2) * xm1;
	float ym1m3m = 1.0f - 3.0f * ym1m - (ym1m * 2) * ym1;
	float zm1m3m = 1.0f - 3.0f * zm1m - (zm1m * 2) * zm1;
	float pxyz = xmm3m * ymm3m * zmm3m;
	float pxyz1 = xmm3m * ymm3m * zm1m3m;
	float pxy1z = xmm3m * ym1m3m * zmm3m;
	float pxy1z1 = xmm3m * ym1m3m * zm1m3m;
	float px1yz = xm1m3m * ymm3m * zmm3m;
	float px1yz1 = xm1m3m * ymm3m * zm1m3m;
	float px1y1z = xm1m3m * ym1m3m * zmm3m;
	float px1y1z1 = xm1m3m * ym1m3m * zm1m3m;
	float *p3d;
	
	p3d = PERLIN_GRADIENT(xpy + zp);
	out.x += xm * pxyz * p3d[0];
	out.y += ym * pxyz * p3d[1];
	out.z += zm * pxyz * p3d[2];
	p3d = PERLIN_GRADIENT(xpy + zp1);
	out.x += xm * pxyz1 * p3d[0];
	out.y += ym * pxyz1 * p3d[1];
	out.z += zm1 * pxyz1 * p3d[2];
	p3d = PERLIN_GRADIENT(xpy1 + zp);
	out.x += xm * pxy1z * p3d[0];
	out.y += ym1 * pxy1z * p3d[1];
	out.z += zm * pxy1z * p3d[2];
	p3d = PERLIN_GRADIENT(xpy1 + zp1);
	out.x += xm * pxy1z1 * p3d[0];
	out.y += ym1 * pxy1z1 * p3d[1];
	out.z += zm1 * pxy1z1 * p3d[2];
	p3d = PERLIN_GRADIENT(xp1y + zp);
	out.x += xm1 * px1yz * p3d[0];
	out.y += ym * px1yz * p3d[1];
	out.z += zm * px1yz * p3d[2];
	p3d = PERLIN_GRADIENT(xp1y + zp1);
	out.x += xm1 * px1yz1 * p3d[0];
	out.y += ym * px1yz1 * p3d[1];
	out.z += zm1 * px1yz1 * p3d[2];
	p3d = PERLIN_GRADIENT(xp1y1 + zp);
	out.x += xm1 * px1y1z * p3d[0];
	out.y += ym1 * px1y1z * p3d[1];
	out.z += zm * px1y1z * p3d[2];
	p3d = PERLIN_GRADIENT(xp1y1 + zp1);
	out.x += xm1 * px1y1z1 * p3d[0];
	out.y += ym1 * px1y1z1 * p3d[1];
	out.z += zm1 * px1y1z1 * p3d[2];
	return out;
}
